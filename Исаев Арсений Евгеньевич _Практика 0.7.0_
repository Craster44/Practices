{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1Dnl_nuebn9OHoxAPK24fmV-JxBULix3D","timestamp":1730435814504},{"file_id":"1l_GPJjnpKNgfxCGYwBYdhk5eQjOdijks","timestamp":1730172265758}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["ФИО:"],"metadata":{"id":"ZLVI_WIcuT56"}},{"cell_type":"code","source":[],"metadata":{"id":"3AfG_Tal0P2S"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Задание 1. HTTP-запросы, ответы и погода\n","\n","Напишите HTTP-запрос для получения информации о погоде в введенном городе из API. Можно использовать API: https://open-meteo.com/. Используйте метод GET.\n","\n","\n","Ввод\n","```\n","56.50, 60.35\n","```\n","\n","Вывод\n","```\n","Сегодня (1.11) погода 20 ◦С, нет осадков, туман\n","```\n","\n","\n","\n"],"metadata":{"id":"FtjnLNIKzfMZ"}},{"cell_type":"code","source":["import requests\n","\n","def get_weather(latitude, longitude):\n","    url = f\"https://api.open-meteo.com/v1/forecast?latitude={latitude}&longitude={longitude}&current_weather=true\"\n","    response = requests.get(url)\n","\n","    if response.status_code == 200:\n","        data = response.json()\n","        return data['current_weather']\n","    else:\n","        return None\n","\n","def main():\n","    coordinates = input(\"Введите координаты (широта, долгота): \")\n","    latitude, longitude = map(float, coordinates.split(\",\"))\n","\n","    weather = get_weather(latitude, longitude)\n","\n","    if weather:\n","        temperature = weather['temperature']\n","        weather_condition = weather['weathercode']\n","\n","        weather_descriptions = {\n","            0: \"ясно\",\n","            1: \"небольшая облачность\",\n","            2: \"облачно\",\n","            3: \"дождь\",\n","            4: \"снег\",\n","            5: \"туман\"\n","        }\n","        description = weather_descriptions.get(weather_condition, \"неизвестно\")\n","        print(f\"Сегодня погода {temperature} ◦C, {description}\")\n","    else:\n","        print(\"Не удалось получить данные о погоде.\")\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"id":"5Mbs40_buVRV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734607253612,"user_tz":-300,"elapsed":334862,"user":{"displayName":"Арсений Исаев","userId":"16271015508624812760"}},"outputId":"1f58ff14-35f0-4fb4-e8e2-e92ddf8f8bfa"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Введите координаты (широта, долгота): -63.292792, -155.946778\n","Сегодня погода 0.9 ◦C, дождь\n"]}]},{"cell_type":"markdown","source":["## Задание 2. HTTP-запросы, ответы и покемоны\n","\n","\n","Создайте код программы, которая будет взаимодействовать с API, со следующим функионалом:\n","\n","1. Используя метод GET, отправьте запрос на endpoint /pokemon, чтобы получить список первых 20 покемонов\n","\n","2. Извлеките имена покемонов из ответа и выведите их списком\n","\n","3. Введите с помощью input() название одного из покемонов\n","\n","\n","```\n","Имя покемона: clefairy\n","```\n","\n","\n","\n","4. Отправьте GET-запрос, чтобы получить полную информацию о выбранном покемоне\n","\n","5. Извлеките и выведите следующие данные о введенном покемоне:\n","\n","     • Имя\n","\n","     • Тип\n","\n","     • Вес\n","\n","     • Рост\n","\n","     • Способности\n","\n","Используйте PokéAPI (https://pokeapi.co/), который предоставляет информацию о покемонах, их характеристиках, типах и другую информацию."],"metadata":{"id":"oZ1guEbl0PZm"}},{"cell_type":"code","source":["import requests\n","\n","def get_pokemon_list():\n","    url = \"https://pokeapi.co/api/v2/pokemon?limit=20\"\n","    response = requests.get(url)\n","    if response.status_code == 200:\n","        return [pokemon['name'] for pokemon in response.json()['results']]\n","    else:\n","        print(\"Ошибка при получении списка покемонов.\")\n","        return []\n","\n","def get_pokemon_info(pokemon_name):\n","    url = f\"https://pokeapi.co/api/v2/pokemon/{pokemon_name}\"\n","    response = requests.get(url)\n","    if response.status_code == 200:\n","        data = response.json()\n","        return {\n","            \"name\": data['name'],\n","            \"types\": [t['type']['name'] for t in data['types']],\n","            \"weight\": data['weight'],\n","            \"height\": data['height'],\n","            \"abilities\": [a['ability']['name'] for a in data['abilities']]\n","        }\n","    else:\n","        print(\"Ошибка при получении информации о покемоне.\")\n","        return None\n","\n","def main():\n","    pokemon_list = get_pokemon_list()\n","    print(\"Список покемонов:\")\n","    for pokemon in pokemon_list:\n","        print(pokemon)\n","\n","    pokemon_name = input(\"Введите имя покемона: \").lower()\n","    pokemon_info = get_pokemon_info(pokemon_name)\n","\n","    if pokemon_info:\n","        print(f\"Имя: {pokemon_info['name']}\")\n","        print(f\"Типы: {', '.join(pokemon_info['types'])}\")\n","        print(f\"Вес: {pokemon_info['weight']}\")\n","        print(f\"Рост: {pokemon_info['height']}\")\n","        print(f\"Способности: {', '.join(pokemon_info['abilities'])}\")\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"id":"JkFmivjp25NL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734608002503,"user_tz":-300,"elapsed":196752,"user":{"displayName":"Арсений Исаев","userId":"16271015508624812760"}},"outputId":"c44b3da0-2ec0-4b6e-c50f-c12f93ea450a"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Список покемонов:\n","bulbasaur\n","ivysaur\n","venusaur\n","charmander\n","charmeleon\n","charizard\n","squirtle\n","wartortle\n","blastoise\n","caterpie\n","metapod\n","butterfree\n","weedle\n","kakuna\n","beedrill\n","pidgey\n","pidgeotto\n","pidgeot\n","rattata\n","raticate\n","Введите имя покемона: charmander\n","Имя: charmander\n","Типы: fire\n","Вес: 85\n","Рост: 6\n","Способности: blaze, solar-power\n"]}]},{"cell_type":"markdown","source":["## Задание 3. HTTP-запросы, ответы и посты\n","\n","Создайте программу, которая будет взаимодействовать с JSONPlaceholder API, реализуя следующие функции:\n","\n","1. Реализуйте функцию, которая выполняет GET-запрос к https://jsonplaceholder.typicode.com/posts и возвращает список постов в формате JSON\n","\n","2. Реализуйте функцию, котороая получает вводимое ID поста, выполняет GET-запрос по ID и возвращает данные поста в формате JSON\n","\n","3. Реализуйте функцию, которая выполняет обработку JSON из пункта 2 и выводит всю важную информацию в консоль"],"metadata":{"id":"h194KTer1-B3"}},{"cell_type":"code","source":["import requests\n","\n","def get_posts():\n","    \"\"\"Выполняет GET-запрос к API и возвращает список постов.\"\"\"\n","    response = requests.get(\"https://jsonplaceholder.typicode.com/posts\")\n","    return response.json()\n","\n","def get_post_by_id(post_id):\n","    \"\"\"Получает пост по ID и возвращает данные в формате JSON.\"\"\"\n","    response = requests.get(f\"https://jsonplaceholder.typicode.com/posts/{post_id}\")\n","    return response.json()\n","\n","def display_post_info(post):\n","    \"\"\"Выводит важную информацию о посте в консоль.\"\"\"\n","    print(f\"ID: {post['id']}\")\n","    print(f\"Заголовок: {post['title']}\")\n","    print(f\"Содержимое: {post['body']}\")\n","    print(f\"Автор ID: {post['userId']}\")\n","\n","if __name__ == \"__main__\":\n","    posts = get_posts()\n","    print(\"Список постов загружен.\")\n","\n","    post_id = int(input(\"Введите ID поста для получения информации: \"))\n","    post = get_post_by_id(post_id)\n","\n","    if 'id' in post:\n","        display_post_info(post)\n","    else:\n","        print(\"Пост с таким ID не найден.\")\n"],"metadata":{"id":"YANQx4o258Zn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734612506859,"user_tz":-300,"elapsed":44774,"user":{"displayName":"Арсений Исаев","userId":"16271015508624812760"}},"outputId":"f97c1e45-0c44-4858-9c89-f55415cba86a"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Список постов загружен.\n","Введите ID поста для получения информации: 45\n","ID: 45\n","Заголовок: ut numquam possimus omnis eius suscipit laudantium iure\n","Содержимое: est natus reiciendis nihil possimus aut provident\n","ex et dolor\n","repellat pariatur est\n","nobis rerum repellendus dolorem autem\n","Автор ID: 5\n"]}]},{"cell_type":"markdown","source":["## Задание 4. HTTP-запросы, ответы и работа с постами\n","\n","Создайте программу, которая будет взаимодействовать с JSONPlaceholder API (из предыдущего задания), реализуя новые функции:\n","\n","1. Реализуйте функцию, которая принимает заголовок, содержимое и ID пользователя (информация вводится с помощью input()), выполняет POST-запрос для создания нового поста и возвращает информацию о созданном посте в формате JSON\n","\n","\n","```\n","Заголовок: Новый пост\n","Содержимое поста: Тут должно находиться содержимое нового поста...\n","ID пользователя: 10\n","```\n","\n","\n","\n","2. Реализуйте функцию, которая принимает ID поста, новый заголовок и новое содержимое, выполняет PUT-запрос и возвращает обновлённый пост в формате JSON\n","\n","3. Реализуйте функцию, которая принимает ID поста, выполняет DELETE-запрос и возвращает статус-код ответа"],"metadata":{"id":"4MjiaxDM58ta"}},{"cell_type":"code","source":["import requests\n","\n","def get_posts():\n","    \"\"\"Выполняет GET-запрос к API и возвращает список постов.\"\"\"\n","    response = requests.get(\"https://jsonplaceholder.typicode.com/posts\")\n","    return response.json()\n","\n","def get_post_by_id(post_id):\n","    \"\"\"Получает пост по ID и возвращает данные в формате JSON.\"\"\"\n","    response = requests.get(f\"https://jsonplaceholder.typicode.com/posts/{post_id}\")\n","    return response.json()\n","\n","def display_post_info(post):\n","    \"\"\"Выводит важную информацию о посте в консоль.\"\"\"\n","    print(f\"Заголовок: {post['title']}\")\n","    print(f\"Содержимое: {post['body']}\")\n","    print(f\"ID пользователя: {post['userId']}\")\n","\n","def create_post():\n","    \"\"\"Создает новый пост с помощью POST-запроса и возвращает информацию о созданном посте.\"\"\"\n","    title = input(\"Заголовок: \")\n","    body = input(\"Содержимое поста: \")\n","    user_id = input(\"ID пользователя: \")\n","\n","    new_post = {\n","        \"title\": title,\n","        \"body\": body,\n","        \"userId\": int(user_id)\n","    }\n","\n","    response = requests.post(\"https://jsonplaceholder.typicode.com/posts\", json=new_post)\n","    return response.json()\n","\n","def update_post(post_id):\n","    \"\"\"Обновляет пост с помощью PUT-запроса и возвращает обновленный пост.\"\"\"\n","    new_title = input(\"Новый заголовок: \")\n","    new_body = input(\"Новое содержимое: \")\n","\n","    updated_post = {\n","        \"title\": new_title,\n","        \"body\": new_body,\n","        \"userId\": post_id\n","    }\n","\n","    response = requests.put(f\"https://jsonplaceholder.typicode.com/posts/{post_id}\", json=updated_post)\n","    return response.json()\n","\n","def delete_post(post_id):\n","    \"\"\"Удаляет пост по ID и возвращает статус-код ответа.\"\"\"\n","    response = requests.delete(f\"https://jsonplaceholder.typicode.com/posts/{post_id}\")\n","    return response.status_code\n","\n","if __name__ == \"__main__\":\n","    posts = get_posts()\n","    print(\"Список постов:\")\n","    for post in posts[:5]:\n","        display_post_info(post)\n","\n","    created_post = create_post()\n","    print(\"Созданный пост:\", created_post)\n","\n","    post_id_to_update = int(input(\"Введите ID поста для обновления: \"))\n","    updated_post = update_post(post_id_to_update)\n","    print(\"Обновленный пост:\", updated_post)\n","\n","    post_id_to_delete = int(input(\"Введите ID поста для удаления: \"))\n","    status_code = delete_post(post_id_to_delete)\n","    print(\"Статус-код удаления:\", status_code)\n"],"metadata":{"id":"jZUIdwq96DNl","colab":{"base_uri":"https://localhost:8080/","height":836},"executionInfo":{"status":"error","timestamp":1734612956266,"user_tz":-300,"elapsed":73754,"user":{"displayName":"Арсений Исаев","userId":"16271015508624812760"}},"outputId":"841fcc42-7f91-43b4-8d41-577498a4951c"},"execution_count":4,"outputs":[{"name":"stdout","output_type":"stream","text":["Список постов:\n","Заголовок: sunt aut facere repellat provident occaecati excepturi optio reprehenderit\n","Содержимое: quia et suscipit\n","suscipit recusandae consequuntur expedita et cum\n","reprehenderit molestiae ut ut quas totam\n","nostrum rerum est autem sunt rem eveniet architecto\n","ID пользователя: 1\n","Заголовок: qui est esse\n","Содержимое: est rerum tempore vitae\n","sequi sint nihil reprehenderit dolor beatae ea dolores neque\n","fugiat blanditiis voluptate porro vel nihil molestiae ut reiciendis\n","qui aperiam non debitis possimus qui neque nisi nulla\n","ID пользователя: 1\n","Заголовок: ea molestias quasi exercitationem repellat qui ipsa sit aut\n","Содержимое: et iusto sed quo iure\n","voluptatem occaecati omnis eligendi aut ad\n","voluptatem doloribus vel accusantium quis pariatur\n","molestiae porro eius odio et labore et velit aut\n","ID пользователя: 1\n","Заголовок: eum et est occaecati\n","Содержимое: ullam et saepe reiciendis voluptatem adipisci\n","sit amet autem assumenda provident rerum culpa\n","quis hic commodi nesciunt rem tenetur doloremque ipsam iure\n","quis sunt voluptatem rerum illo velit\n","ID пользователя: 1\n","Заголовок: nesciunt quas odio\n","Содержимое: repudiandae veniam quaerat sunt sed\n","alias aut fugiat sit autem sed est\n","voluptatem omnis possimus esse voluptatibus quis\n","est aut tenetur dolor neque\n","ID пользователя: 1\n","Заголовок: ячс чяс\n","Содержимое поста: мчсссссссссс\n","ID пользователя: 2\n","Созданный пост: {'title': 'ячс чяс', 'body': 'мчсссссссссс', 'userId': 2, 'id': 101}\n","Введите ID поста для обновления: \n"]},{"output_type":"error","ename":"ValueError","evalue":"invalid literal for int() with base 10: ''","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-299db6e43385>\u001b[0m in \u001b[0;36m<cell line: 53>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     60\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Созданный пост:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcreated_post\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     61\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 62\u001b[0;31m     \u001b[0mpost_id_to_update\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Введите ID поста для обновления: \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     63\u001b[0m     \u001b[0mupdated_post\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mupdate_post\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpost_id_to_update\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     64\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Обновленный пост:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mupdated_post\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: invalid literal for int() with base 10: ''"]}]},{"cell_type":"code","source":[],"metadata":{"id":"9MXjW31Crj-1"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Задание 5. HTTP-запросы, ответы и пёсики\n","\n","Создайте программу, которая будет взаимодействовать с Dog API, которая позволит получать список пород собак, вводить несколько пород и получать их фотогрфии.\n","\n","Этапы:\n","\n","1. Создайте функцию, которая использует метод GET и возвращает список всех пород собак в формате нумерованного списка\n","\n","2. Реализуйте возможность ввода нескольких пород собак через запятую\n","\n","\n","```\n","african, chow, dingo\n","```\n","\n","\n","\n","3. Создание функции, которая реализует запрос, возвращает и выводит изображениия собак, породы которых были введены до этого\n","\n","\n","Используйте Dog API (https://dog.ceo/dog-api/), который предоставляет информацию о породах собак и их изображения.\n"],"metadata":{"id":"y0EyPsFQ6mSZ"}},{"cell_type":"code","source":["import requests\n","\n","def get_breeds():\n","    response = requests.get(\"https://dog.ceo/api/breeds/list/all\")\n","    if response.status_code == 200:\n","        breeds = response.json()['message']\n","        return list(breeds.keys())\n","    else:\n","        return []\n","\n","def input_breeds():\n","    breeds_input = input(\"Введите породы собак через запятую: \")\n","    return [breed.strip() for breed in breeds_input.split(\",\")]\n","\n","def get_dog_images(breeds):\n","    images = {}\n","    for breed in breeds:\n","        response = requests.get(f\"https://dog.ceo/api/breed/{breed}/images/random\")\n","        if response.status_code == 200:\n","            images[breed] = response.json()['message']\n","        else:\n","            images[breed] = None\n","    return images\n","\n","def main():\n","    print(\"Список пород собак:\")\n","    breeds = get_breeds()\n","    for index, breed in enumerate(breeds, start=1):\n","        print(f\"{index}. {breed}\")\n","\n","    selected_breeds = input_breeds()\n","    images = get_dog_images(selected_breeds)\n","\n","    for breed, image in images.items():\n","        if image:\n","            print(f\"Порода: {breed}, Изображение: {image}\")\n","        else:\n","            print(f\"Порода: {breed} не найдена.\")\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"id":"CVJx0B9E8au1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734613174788,"user_tz":-300,"elapsed":19514,"user":{"displayName":"Арсений Исаев","userId":"16271015508624812760"}},"outputId":"efbdf786-79fa-48c3-989b-c766376cf274"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Список пород собак:\n","1. affenpinscher\n","2. african\n","3. airedale\n","4. akita\n","5. appenzeller\n","6. australian\n","7. bakharwal\n","8. basenji\n","9. beagle\n","10. bluetick\n","11. borzoi\n","12. bouvier\n","13. boxer\n","14. brabancon\n","15. briard\n","16. buhund\n","17. bulldog\n","18. bullterrier\n","19. cattledog\n","20. cavapoo\n","21. chihuahua\n","22. chippiparai\n","23. chow\n","24. clumber\n","25. cockapoo\n","26. collie\n","27. coonhound\n","28. corgi\n","29. cotondetulear\n","30. dachshund\n","31. dalmatian\n","32. dane\n","33. danish\n","34. deerhound\n","35. dhole\n","36. dingo\n","37. doberman\n","38. elkhound\n","39. entlebucher\n","40. eskimo\n","41. finnish\n","42. frise\n","43. gaddi\n","44. germanshepherd\n","45. greyhound\n","46. groenendael\n","47. havanese\n","48. hound\n","49. husky\n","50. keeshond\n","51. kelpie\n","52. kombai\n","53. komondor\n","54. kuvasz\n","55. labradoodle\n","56. labrador\n","57. leonberg\n","58. lhasa\n","59. malamute\n","60. malinois\n","61. maltese\n","62. mastiff\n","63. mexicanhairless\n","64. mix\n","65. mountain\n","66. mudhol\n","67. newfoundland\n","68. otterhound\n","69. ovcharka\n","70. papillon\n","71. pariah\n","72. pekinese\n","73. pembroke\n","74. pinscher\n","75. pitbull\n","76. pointer\n","77. pomeranian\n","78. poodle\n","79. pug\n","80. puggle\n","81. pyrenees\n","82. rajapalayam\n","83. redbone\n","84. retriever\n","85. ridgeback\n","86. rottweiler\n","87. saluki\n","88. samoyed\n","89. schipperke\n","90. schnauzer\n","91. segugio\n","92. setter\n","93. sharpei\n","94. sheepdog\n","95. shiba\n","96. shihtzu\n","97. spaniel\n","98. spitz\n","99. springer\n","100. stbernard\n","101. terrier\n","102. tervuren\n","103. vizsla\n","104. waterdog\n","105. weimaraner\n","106. whippet\n","107. wolfhound\n","Введите породы собак через запятую: vizsla\n","Порода: vizsla, Изображение: https://images.dog.ceo/breeds/vizsla/n02100583_14231.jpg\n"]}]}]}