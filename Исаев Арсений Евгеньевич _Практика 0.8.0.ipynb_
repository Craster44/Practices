{"cells":[{"cell_type":"markdown","metadata":{"id":"oP68Ko6DZnFT"},"source":["**Введите ваше ФИО**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_rtkk1A9Zmc5"},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"ra45s33wUt-C"},"source":["# Задание 1"]},{"cell_type":"markdown","metadata":{"id":"G56D5mNCUwp5"},"source":["Задача: Создать чат бота для получения информации об исследованиях космоса\n","\n","Описание: Создайте комплексное приложение командной строки, которое будет использоваться в качестве панели управления исследованиями космоса. Данное приложение будет обращаться к https://api.nasa.gov/ для предоставления пользователям набора информации о космосе, включая:\n","\n","- Астрономическая картинка дня (APOD): Отображение APOD с пояснениями к нему.\n","- Фотографии с марсохода: позволяет пользователям выбирать и фильтровать фотографии с марсохода по дате и типу камеры.\n","- Объекты, сближающиеся с Землей (ОСЗ): Поиск и отображение информации об объектах, сближающихся с Землей, на определенную дату, включая их размеры и потенциальную опасность.\n","- Данные о космической погоде: Отображают последние данные о космической погоде, включая солнечные вспышки и геомагнитные бури.\n","Приложение должно позволять пользователям ориентироваться в этих функциях, корректно обрабатывать ошибки и обеспечивать удобство работы.\n","\n","Требования:\n","- Пользовательский ввод: Приложение должно предложить пользователю ввести данные, чтобы выбрать, какую функцию он хочет изучить.\n","- Проверка данных: Убедитесь, что пользовательские данные (например, даты) проверены.\n","- Обработка ошибок: Корректно обрабатывайте ошибки API и неверные ответы.\n","- Представление данных: Представляйте данные в четкой и организованной форме.\n","- Опция выхода: позволяет пользователям выходить из приложения в любое время."]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":838409,"status":"ok","timestamp":1734614653048,"user":{"displayName":"Арсений Исаев","userId":"16271015508624812760"},"user_tz":-300},"id":"wGeJM9n4UqUD","outputId":"d2095af7-4d0a-4dbe-f763-86cddfd29fc3"},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Выберите опцию:\n","1. Астрономическая картинка дня (APOD)\n","2. Фотографии с марсохода\n","3. Объекты, сближающиеся с Землей\n","4. Данные о космической погоде\n","5. Выход\n","Введите номер опции: 2\n","Введите сол: 1\n","Введите тип камеры: 3\n","Ошибка при получении фотографий с марсохода: 403\n","\n","Выберите опцию:\n","1. Астрономическая картинка дня (APOD)\n","2. Фотографии с марсохода\n","3. Объекты, сближающиеся с Землей\n","4. Данные о космической погоде\n","5. Выход\n","Введите номер опции: 1\n","Ошибка при получении APOD: 403\n","\n","Выберите опцию:\n","1. Астрономическая картинка дня (APOD)\n","2. Фотографии с марсохода\n","3. Объекты, сближающиеся с Землей\n","4. Данные о космической погоде\n","5. Выход\n","Введите номер опции: 1\n","Ошибка при получении APOD: 403\n","\n","Выберите опцию:\n","1. Астрономическая картинка дня (APOD)\n","2. Фотографии с марсохода\n","3. Объекты, сближающиеся с Землей\n","4. Данные о космической погоде\n","5. Выход\n","Введите номер опции: 3\n","Введите дату (YYYY-MM-DD): 2011-11-12\n","Ошибка при получении ОСЗ: 403\n","\n","Выберите опцию:\n","1. Астрономическая картинка дня (APOD)\n","2. Фотографии с марсохода\n","3. Объекты, сближающиеся с Землей\n","4. Данные о космической погоде\n","5. Выход\n","Введите номер опции: 5\n","Выход из приложения.\n"]}],"source":["import requests\n","\n","API_KEY = ' https://api.nasa.gov/'\n","\n","def get_apod():\n","    \"\"\"Получает астрономическую картинку дня (APOD)\"\"\"\n","    url = f'https://api.nasa.gov/planetary/apod?api_key={API_KEY}'\n","    response = requests.get(url)\n","    if response.status_code == 200:\n","        return response.json()\n","    else:\n","        print(\"Ошибка при получении APOD:\", response.status_code)\n","        return None\n","\n","def get_mars_photos(sol, camera):\n","    \"\"\"Получает фотографии с марсохода по заданной сол и камере\"\"\"\n","    url = f'https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol={sol}&camera={camera}&api_key={API_KEY}'\n","    response = requests.get(url)\n","    if response.status_code == 200:\n","        return response.json().get('photos', [])\n","    else:\n","        print(\"Ошибка при получении фотографий с марсохода:\", response.status_code)\n","        return []\n","\n","def get_near_earth_objects(date):\n","    \"\"\"Получает объекты, сближающиеся с Землей на заданную дату\"\"\"\n","    url = f'https://api.nasa.gov/neo/rest/v1/feed?start_date={date}&end_date={date}&api_key={API_KEY}'\n","    response = requests.get(url)\n","    if response.status_code == 200:\n","        return response.json().get('near_earth_objects', {})\n","    else:\n","        print(\"Ошибка при получении ОСЗ:\", response.status_code)\n","        return {}\n","\n","def get_space_weather():\n","    \"\"\"Получает данные о космической погоде\"\"\"\n","    url = f'https://api.nasa.gov/DONKI/FLR?api_key={API_KEY}'\n","    response = requests.get(url)\n","    if response.status_code == 200:\n","        return response.json()\n","    else:\n","        print(\"Ошибка при получении данных о космической погоде:\", response.status_code)\n","        return []\n","\n","def main():\n","    while True:\n","        print(\"\\nВыберите опцию:\")\n","        print(\"1. Астрономическая картинка дня (APOD)\")\n","        print(\"2. Фотографии с марсохода\")\n","        print(\"3. Объекты, сближающиеся с Землей\")\n","        print(\"4. Данные о космической погоде\")\n","        print(\"5. Выход\")\n","\n","        choice = input(\"Введите номер опции: \")\n","\n","        if choice == '1':\n","            apod = get_apod()\n","            if apod:\n","                print(f\"Название: {apod['title']}\\nОписание: {apod['explanation']}\\nURL: {apod['url']}\")\n","\n","        elif choice == '2':\n","            sol = input(\"Введите сол: \")\n","            camera = input(\"Введите тип камеры: \")\n","            photos = get_mars_photos(sol, camera)\n","            for photo in photos:\n","                print(photo['img_src'])\n","\n","        elif choice == '3':\n","            date = input(\"Введите дату (YYYY-MM-DD): \")\n","            neo_objects = get_near_earth_objects(date)\n","            for date, objects in neo_objects.items():\n","                print(f\"Дата: {date}\")\n","                for obj in objects:\n","                    print(f\"Название: {obj['name']}, Размер: {obj['estimated_diameter']['meters']['estimated_diameter_max']} м, Потенциальная опасность: {obj['is_potentially_hazardous_asteroid']}\")\n","\n","        elif choice == '4':\n","            space_weather = get_space_weather()\n","            for event in space_weather:\n","                print(f\"Дата: {event['beginTime']}, Событие: {event['eventType']}\")\n","\n","        elif choice == '5':\n","            print(\"Выход из приложения.\")\n","            break\n","\n","        else:\n","            print(\"Неверный выбор. Пожалуйста, попробуйте снова.\")\n","\n","if __name__ == \"__main__\":\n","    main()\n","\n"]},{"cell_type":"markdown","metadata":{"id":"ia9UtA0cU1Iy"},"source":["# Задание 2"]},{"cell_type":"markdown","metadata":{"id":"Ofu_GmqrU1Iy"},"source":["Описание задачи\n","\n","Цель этой задачи - создать скрипт на Python, который взаимодействует с API Чикагского института искусств (https://api.artic.edu/docs/) для извлечения и отображения произведений искусства. Скрипт должен позволять пользователям просматривать работы по страницам, фильтровать их по имени художника и просматривать подробную информацию о выбранных произведениях искусства. Ниже приведены требования и функциональные возможности, которые необходимо реализовать:\n","\n","Требования:\n","Извлекать произведения искусства:\n","\n","- Создайте функцию, которая извлекает список произведений искусства из API Чикагского института искусств.\n","Функция должна принимать параметр page для разбивки на страницы и возвращать список произведений искусства вместе с информацией о разбивке на страницы.\n","Фильтровать произведения искусства:\n","\n","- Реализуйте функцию, которая фильтрует список произведений искусства на основе имени указанного художника. Функция должна возвращать список работ, которые соответствуют имени художника (без учета регистра).\n","Отображать подробную информацию об оформлении:\n","\n","- Напишите функцию, которая отображает названия работ для пользователя и позволяет ему выбрать одну из них, введя соответствующий номер.\n","После выбора функция должна отображать подробную информацию о выбранном произведении, включая название, исполнителя, дату и носитель.\n","Разбивка на страницы и взаимодействие с пользователем:\n","\n","- Создайте основную функцию, которая управляет выборкой произведений и взаимодействием с пользователем.\n","\n","Разрешите пользователям перемещаться по страницам с произведениями искусства, выполнять фильтрацию по исполнителю или выходить из программы.\n","\n","Если страниц с произведениями искусства несколько, укажите варианты перехода к следующей странице, предыдущей странице, фильтрации по исполнителю или выхода из программы."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":84179,"status":"ok","timestamp":1731070488869,"user":{"displayName":"Арсений Исаев","userId":"16271015508624812760"},"user_tz":-300},"id":"jjUH1GznU1Iy","outputId":"5fe6bba9-72f5-4784-ce81-281dc431af69"},"outputs":[{"name":"stdout","output_type":"stream","text":["\n","Страница 1 из 10527\n","1. Untitled, plate ten from See America First\n","2. Rumble, from Brawling Spitfire Wrestling Series\n","3. Ceremonial Hanging (palepai)\n","4. Jelayah (Overcoat Dress)\n","5. Dress\n","6. Rose Bowl\n","7. Kimkhwab Textile\n","8. Kimkhwab Textile\n","9. Kimkhwab Textile\n","10. Kimkhwab Textile\n","11. Kimkhwab Textile\n","12. Kimkhwab Textile\n","\n","Выберите действие:\n","1. Следующая страница\n","2. Предыдущая страница\n","3. Фильтр по художнику\n","4. Подробная информация о произведении\n","5. Выход\n","Ваш выбор: 1\n","\n","Страница 2 из 10527\n","1. Untitled (Butterfly Habitat)\n","2. Quartz Mill near Virginia City\n","3. Three Gossips\n","4. Pair of Bracelets with Confronting Makara Heads (Karas)\n","5. Landscape (Bordeaux II)\n","6. Abesti Gogora III\n","7. Scenes from the Life of Saint John the Baptist\n","8. Strikers at Seabrook Farms, Bridgeton, New Jersey (Air View...June 29)\n","9. Strikers at Seabrook Farms, Bridgeton, New Jersey (Riot Men and Women Fighting with Police...)\n","10. Café Express\n","11. Boy's Armor\n","12. Panoafricano\n","\n","Выберите действие:\n","1. Следующая страница\n","2. Предыдущая страница\n","3. Фильтр по художнику\n","4. Подробная информация о произведении\n","5. Выход\n","Ваш выбор: 4\n","Введите номер произведения: 1\n","Название: Untitled (Butterfly Habitat)\n","Художник: Joseph Cornell\n","Дата: c. 1940\n","Носитель: Box construction with painted glass\n","--------------------\n","\n","Страница 2 из 10527\n","1. Untitled (Butterfly Habitat)\n","2. Quartz Mill near Virginia City\n","3. Three Gossips\n","4. Pair of Bracelets with Confronting Makara Heads (Karas)\n","5. Landscape (Bordeaux II)\n","6. Abesti Gogora III\n","7. Scenes from the Life of Saint John the Baptist\n","8. Strikers at Seabrook Farms, Bridgeton, New Jersey (Air View...June 29)\n","9. Strikers at Seabrook Farms, Bridgeton, New Jersey (Riot Men and Women Fighting with Police...)\n","10. Café Express\n","11. Boy's Armor\n","12. Panoafricano\n","\n","Выберите действие:\n","1. Следующая страница\n","2. Предыдущая страница\n","3. Фильтр по художнику\n","4. Подробная информация о произведении\n","5. Выход\n","Ваш выбор: 5\n"]}],"source":["import requests\n","import re\n","\n","API_URL = \"https://api.artic.edu/api/v1/artworks\"\n","\n","def fetch_artworks(page=1):\n","    \"\"\"Извлекает список произведений искусства с указанной страницы.\"\"\"\n","    params = {\"page\": page}\n","    response = requests.get(API_URL, params=params)\n","    response.raise_for_status()\n","    data = response.json()\n","    return data[\"data\"], data[\"pagination\"]\n","\n","\n","def filter_artworks_by_artist(artworks, artist_name):\n","    \"\"\"Фильтрует список произведений искусства по имени художника (без учёта регистра).\"\"\"\n","    artist_name_lower = artist_name.lower()\n","    return [\n","        artwork\n","        for artwork in artworks\n","        if artwork[\"artist_title\"] and artist_name_lower in artwork[\"artist_title\"].lower()\n","    ]\n","\n","\n","def display_artwork_details(artwork):\n","    \"\"\"Отображает подробную информацию о произведении искусства.\"\"\"\n","    print(f\"Название: {artwork['title']}\")\n","    print(f\"Художник: {artwork['artist_title']}\")\n","    print(f\"Дата: {artwork.get('date_display', 'Не указано')}\")\n","    print(f\"Носитель: {artwork.get('medium_display', 'Не указано')}\")\n","    print(\"-\" * 20)\n","\n","\n","def main():\n","    \"\"\"Основная функция для управления взаимодействием с пользователем.\"\"\"\n","    page = 1\n","    while True:\n","        artworks, pagination = fetch_artworks(page)\n","        if not artworks:\n","            print(\"Произведения искусства не найдены.\")\n","            break\n","\n","        print(f\"\\nСтраница {page} из {pagination['total_pages']}\")\n","        for i, artwork in enumerate(artworks):\n","            print(f\"{i+1}. {artwork['title']}\")\n","\n","        choice = input(\n","            \"\\nВыберите действие:\\n\"\n","            \"1. Следующая страница\\n\"\n","            \"2. Предыдущая страница\\n\"\n","            \"3. Фильтр по художнику\\n\"\n","            \"4. Подробная информация о произведении\\n\"\n","            \"5. Выход\\n\"\n","            \"Ваш выбор: \"\n","        )\n","\n","        if choice == \"1\":\n","            if page < pagination[\"total_pages\"]:\n","                page += 1\n","            else:\n","                print(\"Это последняя страница.\")\n","        elif choice == \"2\":\n","            if page > 1:\n","                page -= 1\n","            else:\n","                print(\"Это первая страница.\")\n","        elif choice == \"3\":\n","            artist_name = input(\"Введите имя художника: \")\n","            filtered_artworks = filter_artworks_by_artist(artworks, artist_name)\n","            if filtered_artworks:\n","                print(\"\\nОтфильтрованные произведения искусства:\")\n","                for i, artwork in enumerate(filtered_artworks):\n","                    print(f\"{i+1}. {artwork['title']}\")\n","            else:\n","                print(\"Произведения искусства этого художника не найдены.\")\n","\n","        elif choice == \"4\":\n","            try:\n","                artwork_index = int(input(\"Введите номер произведения: \")) - 1\n","                if 0 <= artwork_index < len(artworks):\n","                    display_artwork_details(artworks[artwork_index])\n","                else:\n","                    print(\"Неверный номер произведения.\")\n","            except ValueError:\n","                print(\"Неверный ввод.\")\n","        elif choice == \"5\":\n","            break\n","        else:\n","            print(\"Неверный выбор.\")\n","\n","\n","if __name__ == \"__main__\":\n","    main()\n","\n"]},{"cell_type":"markdown","metadata":{"id":"eecUb-akU1ji"},"source":["# Задание 3"]},{"cell_type":"markdown","metadata":{"id":"jsK7IKptU1ji"},"source":["Задача: Создать программу по управлению портфелем криптовалют\n","\n","Цель: Создать скрипт на Python, который извлекает цены на криптовалюты в режиме реального времени, позволяет пользователям управлять портфелем криптовалют, вычисляет общую стоимость портфеля, отслеживает изменения цен и предоставляет исторические данные о ценах для анализа.\n","\n","Требования:\n","Получение текущих цен на криптовалюты:\n","\n","Используйте https://docs.coingecko.com/ для получения актуальных цен на список криптовалют.\n","\n","Управление портфелем:\n","\n","- Позволяет пользователю создавать портфель криптовалют и управлять им, указывая количество каждой криптовалюты, которой он владеет.\n","- Расчитывает общую стоимость портфеля в указанной фиатной валюте (например, долларах США).\n","\n","Отслеживание изменения цен:\n","\n","- Отображение процентного изменения цены для каждой криптовалюты в портфеле за последние 24 часа.\n","- Выделите все криптовалюты, стоимость которых значительно увеличилась или снизилась.\n","\n","Поиск исторических данных о ценах:\n","\n","- Получение исторических данных о ценах на указанную криптовалюту за последнюю неделю.\n","- Предоставьте пользователю возможность визуализировать эти данные в простом текстовом формате (например, цены за день).\n","\n","Взаимодействие с пользователем:\n","\n","- Реализуйте интерфейс командной строки для ввода данных пользователем.\n","- Предоставьте опции для получения текущих цен, управления портфелем, просмотра изменений цен или анализа исторических данных.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"_0DToTqlvywa","outputId":"d82c5177-e791-4e26-dfda-3b8aecbf5eae"},"outputs":[{"name":"stdout","output_type":"stream","text":["\n","Меню:\n","1. Добавить криптовалюту\n","2. Показать общую стоимость портфеля\n","3. Отслеживать изменения цен\n","4. Получить исторические данные\n","5. Выход\n","5.0 BITCOIN добавлено в портфель.\n","\n","Меню:\n","1. Добавить криптовалюту\n","2. Показать общую стоимость портфеля\n","3. Отслеживать изменения цен\n","4. Получить исторические данные\n","5. Выход\n"]}],"source":["\n","\n","import requests\n","import json\n","\n","class CryptoPortfolio:\n","    def __init__(self):\n","        self.portfolio = {}  # Словарь для хранения активов и их количества\n","\n","    def add_crypto(self, symbol, amount):\n","        \"\"\"Добавляет криптовалюту в портфель.\"\"\"\n","        if symbol in self.portfolio:\n","            self.portfolio[symbol] += amount\n","        else:\n","            self.portfolio[symbol] = amount\n","        print(f\"{amount} {symbol.upper()} добавлено в портфель.\")\n","\n","    def total_value(self, fiat_currency='usd'):\n","        \"\"\"Возвращает общую стоимость портфеля в указанной валюте.\"\"\"\n","        total = 0\n","        for symbol, amount in self.portfolio.items():\n","            price = self.get_current_price(symbol, fiat_currency)\n","            if price:\n","                total += price * amount\n","        return total\n","\n","    def get_current_price(self, symbol, fiat_currency='usd'):\n","        \"\"\"Получает текущую цену криптовалюты.\"\"\"\n","        url = f\"https://api.coingecko.com/api/v3/simple/price?ids={symbol}&vs_currencies={fiat_currency}&include_24hr_change=true\"\n","        try:\n","            response = requests.get(url)\n","            data = response.json()\n","            return data[symbol][fiat_currency], data[symbol][f'{fiat_currency}_24h_change']\n","        except (KeyError, IndexError, requests.RequestException):\n","            print(f\"Не удалось получить данные для {symbol}.\")\n","            return None\n","\n","    def track_changes(self):\n","        \"\"\"Отображает изменения цен в портфеле за последние 24 часа.\"\"\"\n","        for symbol in self.portfolio.keys():\n","            price, change = self.get_current_price(symbol)\n","            if price is not None:\n","                print(f\"{symbol.upper()}: Цена - {price} USD, Изменение за 24 часа - {change:.2f}%\")\n","\n","    def get_historical_data(self, symbol):\n","        \"\"\"Получает исторические данные за последнюю неделю.\"\"\"\n","        url = f\"https://api.coingecko.com/api/v3/coins/{symbol}/market_chart?vs_currency=usd&days=7\"\n","        try:\n","            response = requests.get(url)\n","            data = response.json()\n","            prices = data['prices']  # Список цен за последние 7 дней\n","            print(\"Исторические данные за последние 7 дней:\")\n","            for price in prices:\n","                print(f\"Дата: {price[0]}, Цена: {price[1]}\")\n","        except requests.RequestException:\n","            print(f\"Не удалось получить исторические данные для {symbol}.\")\n","\n","def main():\n","    portfolio = CryptoPortfolio()\n","    while True:\n","        print(\"\\nМеню:\")\n","        print(\"1. Добавить криптовалюту\")\n","        print(\"2. Показать общую стоимость портфеля\")\n","        print(\"3. Отслеживать изменения цен\")\n","        print(\"4. Получить исторические данные\")\n","        print(\"5. Выход\")\n","\n","        choice = input(\"Выберите действие: \")\n","\n","        if choice == '1':\n","            symbol = input(\"Введите символ криптовалюты (например, 'bitcoin'): \").lower()\n","            amount = float(input(\"Введите количество: \"))\n","            portfolio.add_crypto(symbol, amount)\n","\n","        elif choice == '2':\n","            fiat_currency = input(\"Введите фиатную валюту (например, 'usd'): \")\n","            total = portfolio.total_value(fiat_currency)\n","            print(f\"Общая стоимость портфеля: {total:.2f} {fiat_currency.upper()}\")\n","\n","        elif choice == '3':\n","            portfolio.track_changes()\n","\n","        elif choice == '4':\n","            symbol = input(\"Введите символ криптовалюты для исторических данных: \").lower()\n","            portfolio.get_historical_data(symbol)\n","\n","        elif choice == '5':\n","            print(\"Выход из программы.\")\n","            break\n","\n","        else:\n","            print(\"Недопустимый выбор. Пожалуйста, попробуйте снова.\")\n","\n","if __name__ == \"__main__\":\n","    main()\n","\n"]}],"metadata":{"colab":{"provenance":[{"file_id":"1-1pREx-cvWdJRwcPZCX2BdqRqwJdniU4","timestamp":1731064051360},{"file_id":"17IcY1UTGzZMUteC1w_OLi1DXlUbhQRJu","timestamp":1730777834927}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}