{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"19-5VVsGjYuWlUYTvrLHxqKDD2eOqtzTH","timestamp":1732259523010},{"file_id":"1M-O_KUCtKLJnPKgWsQQu9bkGfa2vOHnO","timestamp":1731995359302}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["ФИО:"],"metadata":{"id":"fLDS5f_mCnPa"}},{"cell_type":"markdown","source":["Исаев Арсений"],"metadata":{"id":"xZcFpe8L6ZP-"}},{"cell_type":"markdown","source":[],"metadata":{"id":"ZX-NJcQDu7bp"}},{"cell_type":"markdown","source":["# Задание 1"],"metadata":{"id":"8XGka5GtEBK1"}},{"cell_type":"markdown","source":["Задание:\n","\n","Создайте класс с именем Rectangle который имеет:\n","- Атрибуты ширины и высоты.\n","- Метод расчета площади.\n","- Метод расчета периметра.\n","- Метод отображения размеров прямоугольника.\n","\n","Создайте экземпляр класса Rectangleи продемонстрируйте его функциональность."],"metadata":{"id":"jQ4qqd8nEZBY"}},{"cell_type":"code","source":["class Rectangle:\n","    def __init__(self, width, height):\n","        \"\"\"Инициализация ширины и высоты прямоугольника.\"\"\"\n","        self.width = width\n","        self.height = height\n","\n","    def area(self):\n","        \"\"\"Метод для расчета площади прямоугольника.\"\"\"\n","        return self.width * self.height\n","\n","    def perimeter(self):\n","        \"\"\"Метод для расчета периметра прямоугольника.\"\"\"\n","        return 2 * (self.width + self.height)\n","\n","    def display_dimensions(self):\n","        \"\"\"Метод для отображения размеров прямоугольника.\"\"\"\n","        print(f\"Ширина: {self.width}, Высота: {self.height}\")\n","\n","\n","\n","rect = Rectangle(int(input()), int(input()))\n","\n","\n","rect.display_dimensions()\n","print(f\"Площадь: {rect.area()}\")\n","print(f\"Периметр: {rect.perimeter()}\")\n"],"metadata":{"id":"dG6uNPqTEAvt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732259821947,"user_tz":-300,"elapsed":5234,"user":{"displayName":"Арсений Исаев","userId":"16271015508624812760"}},"outputId":"b9fa771a-c799-4af2-83ca-5b7ec51f6178"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["20\n","30\n","Ширина: 20, Высота: 30\n","Площадь: 600\n","Периметр: 100\n"]}]},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"0ct1u6lqE73j"}},{"cell_type":"markdown","source":["Задание: Создайте мини версию банковской системы:\n","\n","\n","Инструкции:\n","\n","1. Создайте класс BankAccountсо следующими атрибутами:\n","    - account_holder -  владелец счета\n","    - balance - баланс счета\n","\n","2. Реализуйте следующие методы:\n","    - Метод для инициализации владельца счета: имя владельца счета и установите начальный баланс на 0.\n","    - deposit(amount): Добавьте указанную сумму к балансу.\n","    - withdraw(amount): Вычесть указанную сумму из баланса, если средств достаточно; в противном случае вывести предупреждение.\n","    - get_balance(): Возврат текущего баланса.\n","\n","\n","Создайте объект класса и продемонстрируйте его возможности"],"metadata":{"id":"FOpIpcLxE-WK"}},{"cell_type":"code","source":["class BankAccount:\n","    def __init__(self, account_holder):\n","        \"\"\"Инициализация владельца счета и начального баланса.\"\"\"\n","        self.account_holder = account_holder\n","        self.balance = 0\n","\n","    def deposit(self, amount):\n","        \"\"\"Добавить сумму к балансу.\"\"\"\n","        if amount > 0:\n","            self.balance += amount\n","            print(f\"Сумма {amount} успешно добавлена на счет.\")\n","        else:\n","            print(\"Сумма должна быть положительной.\")\n","\n","    def withdraw(self, amount):\n","        \"\"\"Вычесть сумму из баланса, если средств достаточно.\"\"\"\n","        if amount > self.balance:\n","            print(\"Недостаточно средств для снятия.\")\n","        elif amount <= 0:\n","            print(\"Сумма для снятия должна быть положительной.\")\n","        else:\n","            self.balance -= amount\n","            print(f\"Сумма {amount} успешно снята со счета.\")\n","\n","    def get_balance(self):\n","        \"\"\"Возврат текущего баланса.\"\"\"\n","        return self.balance\n","\n","if __name__ == \"__main__\":\n","    account = BankAccount(input('Введите ваше имя '))\n","\n","    account.deposit(int(input('Введите сумму')))\n","    print(f\"Текущий баланс: {account.get_balance()}\")\n","\n","    account.withdraw(int(input('Введите сумму для снятия')))\n","    print(f\"Текущий баланс: {account.get_balance()}\")\n","\n","    account.withdraw(int(input('Введите сумму для снятия')))\n","    print(f\"Текущий баланс: {account.get_balance()}\")\n","\n","    account.deposit(int(input('Попытайтесь внести сумму')))\n","    print(f\"Текущий баланс: {account.get_balance()}\")"],"metadata":{"id":"WWXNIUrCE99W","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732262730965,"user_tz":-300,"elapsed":18650,"user":{"displayName":"Арсений Исаев","userId":"16271015508624812760"}},"outputId":"445db1d2-25e6-4f45-a73a-da891c51cc66"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Введите ваше имя df\n","Введите сумму30\n","Сумма 30 успешно добавлена на счет.\n","Текущий баланс: 30\n","Введите сумму для снятия90\n","Недостаточно средств для снятия.\n","Текущий баланс: 30\n","Введите сумму для снятия3\n","Сумма 3 успешно снята со счета.\n","Текущий баланс: 27\n","Попытайтесь внести сумму10100011111111111111111111110000000000000000000111111111111111111111110000000000000000000000000000000000000000\n","Сумма 10100011111111111111111111110000000000000000000111111111111111111111110000000000000000000000000000000000000000 успешно добавлена на счет.\n","Текущий баланс: 10100011111111111111111111110000000000000000000111111111111111111111110000000000000000000000000000000000000027\n"]}]},{"cell_type":"markdown","source":["# Задание 3"],"metadata":{"id":"C5DX5Uf2FfP6"}},{"cell_type":"markdown","source":["Возьмите код и задание (Рыцарь и дракон) из предыдущей практики и реализуйте его с применением классов"],"metadata":{"id":"0cR-MYepFgz6"}},{"cell_type":"code","source":[],"metadata":{"id":"Oz9BZbhAFwua"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Дополнительное задание\n"],"metadata":{"id":"b_mJHXcQGI9t"}},{"cell_type":"markdown","source":["Задача: Система управления библиотекой\n","\n","**Цель**\n","Создайте простую систему управления библиотекой, которая позволит пользователям добавлять книги, брать книги, возвращать книги и просматривать список доступных книг.\n","\n","**Требования**\n","\n","1. **Определение класса**:\n","   – Создайте класс с именем «Book» со следующими атрибутами:\n","     - `title`\n","     - `автор`\n","     - `isbn`\n","     - `is_borrowed` (по умолчанию `False`)\n","\n","2. **Класс библиотеки**:\n","   - Создайте класс с именем Library, который управляет коллекцией книг.\n","   - Класс должен иметь следующие методы:\n","     - `__init__(self)`: инициализирует пустой список книг.\n","     - `add_book(self, book: Book)`: добавляет новую книгу в библиотеку.\n","     - `borrow_book(self, isbn: str)`: помечает книгу как заимствованную. Если книга не найдена или уже взята, выведите соответствующее сообщение.\n","     - `return_book(self, isbn: str)`: помечает книгу как возвращенную. Если книга не найдена или не была взята взаймы, выведите соответствующее сообщение.\n","     - `list_available_books(self)`: печатает список всех доступных книг в библиотеке.\n","     - `find_book(self, isbn: str)`: возвращает объект книги, если он найден, в противном случае возвращает `None`.\n","\n","3. **Взаимодействие с пользователем**:\n","   - Создайте простое текстовое меню, которое позволит пользователям:\n","     - Добавить книгу\n","     - Одолжить книгу\n","     - Вернуть книгу\n","     - Список доступных книг\n","     - Выйти из программы"],"metadata":{"id":"pnIUdFPcGOVL"}},{"cell_type":"code","source":["class Book:\n","    def __init__(self, title: str, author: str, isbn: str):\n","        self.title = title\n","        self.author = author\n","        self.isbn = isbn\n","        self.is_borrowed = False\n","\n","class Library:\n","    def __init__(self):\n","        self.books = []\n","\n","    def add_book(self, book: Book):\n","        if self.find_book(book.isbn) is None:\n","            self.books.append(book)\n","            print(f\"Книга '{book.title}' добавлена в библиотеку.\")\n","        else:\n","            print(\"Эта книга уже есть в библиотеке.\")\n","\n","    def borrow_book(self, isbn: str):\n","        book = self.find_book(isbn)\n","        if book is None:\n","            print(\"Книга не найдена.\")\n","        elif book.is_borrowed:\n","            print(\"Книга уже взята.\")\n","        else:\n","            book.is_borrowed = True\n","            print(f\"Вы взяли книгу '{book.title}'.\")\n","\n","    def return_book(self, isbn: str):\n","        book = self.find_book(isbn)\n","        if book is None:\n","            print(\"Книга не найдена.\")\n","        elif not book.is_borrowed:\n","            print(\"Эта книга не была взята.\")\n","        else:\n","            book.is_borrowed = False\n","            print(f\"Вы вернули книгу '{book.title}'.\")\n","\n","    def list_available_books(self):\n","        available_books = [book for book in self.books if not book.is_borrowed]\n","        if available_books:\n","            print(\"Доступные книги:\")\n","            for book in available_books:\n","                print(f\"- {book.title} (Автор: {book.author}, ISBN: {book.isbn})\")\n","        else:\n","            print(\"Нет доступных книг.\")\n","\n","    def find_book(self, isbn: str):\n","        for book in self.books:\n","            if book.isbn == isbn:\n","                return book\n","        return None\n","\n","def main():\n","    library = Library()\n","    while True:\n","        print(\"\\nМеню:\")\n","        print(\"1. Добавить книгу\")\n","        print(\"2. Одолжить книгу\")\n","        print(\"3. Вернуть книгу\")\n","        print(\"4. Список доступных книг\")\n","        print(\"5. Выйти\")\n","        choice = input(\"Выберите действие: \")\n","\n","        if choice == '1':\n","            title = input(\"Введите название книги: \")\n","            author = input(\"Введите автора книги: \")\n","            isbn = input(\"Введите ISBN книги: \")\n","            book = Book(title, author, isbn)\n","            library.add_book(book)\n","        elif choice == '2':\n","            isbn = input(\"Введите ISBN книги для одалживания: \")\n","            library.borrow_book(isbn)\n","        elif choice == '3':\n","            isbn = input(\"Введите ISBN книги для возврата: \")\n","            library.return_book(isbn)\n","        elif choice == '4':\n","            library.list_available_books()\n","        elif choice == '5':\n","            print(\"Выход из программы.\")\n","            break\n","        else:\n","            print(\"Неверный выбор. Пожалуйста, попробуйте снова.\")\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"id":"GKKmdfN8GL6f","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734624501109,"user_tz":-300,"elapsed":63111,"user":{"displayName":"Арсений Исаев","userId":"16271015508624812760"}},"outputId":"e5afd414-253d-40fd-8f15-7369e5645255"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Меню:\n","1. Добавить книгу\n","2. Одолжить книгу\n","3. Вернуть книгу\n","4. Список доступных книг\n","5. Выйти\n","Выберите действие: 1\n","Введите название книги: вааа\n","Введите автора книги: ваыв\n","Введите ISBN книги: 54\n","Книга 'вааа' добавлена в библиотеку.\n","\n","Меню:\n","1. Добавить книгу\n","2. Одолжить книгу\n","3. Вернуть книгу\n","4. Список доступных книг\n","5. Выйти\n","Выберите действие: 3\n","Введите ISBN книги для возврата: 54\n","Эта книга не была взята.\n","\n","Меню:\n","1. Добавить книгу\n","2. Одолжить книгу\n","3. Вернуть книгу\n","4. Список доступных книг\n","5. Выйти\n","Выберите действие: 2\n","Введите ISBN книги для одалживания: 54\n","Вы взяли книгу 'вааа'.\n","\n","Меню:\n","1. Добавить книгу\n","2. Одолжить книгу\n","3. Вернуть книгу\n","4. Список доступных книг\n","5. Выйти\n","Выберите действие: 3\n","Введите ISBN книги для возврата: 54\n","Вы вернули книгу 'вааа'.\n","\n","Меню:\n","1. Добавить книгу\n","2. Одолжить книгу\n","3. Вернуть книгу\n","4. Список доступных книг\n","5. Выйти\n","Выберите действие: 4\n","Доступные книги:\n","- вааа (Автор: ваыв, ISBN: 54)\n","\n","Меню:\n","1. Добавить книгу\n","2. Одолжить книгу\n","3. Вернуть книгу\n","4. Список доступных книг\n","5. Выйти\n","Выберите действие: 5\n","Выход из программы.\n"]}]}]}